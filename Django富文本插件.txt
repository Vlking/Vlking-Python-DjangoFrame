富文本插件：
tinymce插件
1、django的插件：pip install django-tinymce 

2、配置settings.py文件
      INSTALLED_APPS 添加 tinymce 应用
      INSTALLED_APPS = [
'tinymce',
]
      在最底下添加默认配置：
      TINYMCE_DEFAULT_CONFIG = {
'theme':'advanced',
'width':800,
'height':600,
       }

3、创建模型类
      from tinymce.models import HTMLField
      class Blog(models.Model):
sBlog = HTMLField()

4、在视图中使用：
      使用文本域盛放内容
      <form method='post' action='url'>
<textarea></textarea>
      </form>
      在head中添加script
      <script src='/static/tiny_mce/tiny_mce.js'></script>
      <script>
tinyMCE.init({
'mode':'textareas','theme':'advanced',
'width':800,'height':600,
})
      </script>

5、案例：

class Blog(models.Model):
    b_content = HTMLField()

url('editblog', views.edit_blog, name='edit_blog'),

def edit_blog(request):
    if request.method == "GET":
        return render(request, 'edit_blog.html')
    elif request.method == "POST":
        content = request.POST.get("content")
        print(content)
        blog = Blog()
        blog.b_content = content
        blog.save()
        return HttpResponse("保存成功")


{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script type="text/javascript" src='/static/tiny_mce/tiny_mce.js'></script>
    <script>
        tinyMCE.init({
            'mode': 'textareas', 'theme': 'advanced',
            'width': 800, 'height': 600,
        })
    </script>
</head>
<body>
<form action="{% url 'app:edit_blog' %}" method="post">
    {% csrf_token %}
    <textarea name="content">

    </textarea>
    <br>
    <button>保存</button>
</form>
</body>
</html>

