1、数据库操作使用ORM中间件来进行操作，不用写insert、update、delete、select

2、ORM技术缩写：Object Relational Mapping，意思是对象关系映射，作用是将业务逻辑进行了一个解耦合。使用方法如下：
   直接使用对象进行操作：
    object.save()
    object.delete()
    object.update()

  ORM技术可以直接转换成普通的sql语句！
  任何数据库都可以进行操作，也就是说不管是什么数据库都可以使用！

3、ORM在Django项目当中是直接写在Models.py文件里

4、ORM例子：
   class User(models.Model):
    # class User:User是表名（表名一定不要与目录名一致）
    u_name = models.CharField(max_length=16)
    # u_name:文章名称CharField==varchar
    u_age = models.IntegerField(default=1)
    # u_age:默认为1
    #使用ORM建表的时候主键是自动生成的，外键得我们自己来做
    
5、在models模型里2.0以上版本在建立一对多关联的时候必须得加上on_delete（2.0以下版本不用加）
  
   例子：
   class Grade(models.Model):
    g_name = models.CharField(max_length=32)
    
   class Student(models.Model):
    s_name = models.CharField(max_length=16)
    #建立外键，ForeignKey(Grade)外键到Grade上
    #2.0以上版本必须得加on_delete=models.CASCADE,2.0以下版本可以直接写成s_grade =models.ForeignKey(Grade)
    s_grade =models.ForeignKey('Grade',on_delete=models.CASCADE,)
  
   下面是ondelete的用法：
    on_delete=None,               # 删除关联表中的数据时,当前表与其关联的field的行为
    on_delete=models.CASCADE,     # 删除关联数据,与之关联也删除
    on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做
    on_delete=models.PROTECT,     # 删除关联数据,引发错误ProtectedError
    # models.ForeignKey('关联表', on_delete=models.SET_NULL, blank=True, null=True)
    on_delete=models.SET_NULL,    # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）
    # models.ForeignKey('关联表', on_delete=models.SET_DEFAULT, default='默认值')
    on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）
    on_delete=models.SET,         # 删除关联数据,
     a. 与之关联的值设置为指定值,设置：models.SET(值)
     b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)

6、生成表文件方法：
    要想把models变成表就要在CMD下生成迁移文件，方法如下：
    python manage.py makemigrations
    如果执行成功将在项目目录里自动生成一个migrations的文件夹。
    把生成的迁移文件迁移到表里：
    python manage.py migrate
