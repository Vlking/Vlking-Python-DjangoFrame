1、按条件查询数据：

models.py数据表：

class testdate(models.Model):
    #姓名：长度16，姓名值是唯一
    t_name =models.CharField(max_length=16,unique=True)
    #年龄：默认是18岁,db_column='age'在表里字段名叫age
    t_age = models.IntegerField(default=18,db_column='age')
    #性别：False代表男 True代表女,db_column='sex'在表里字段名叫sex
    t_sex = models.BooleanField(default=False,db_column='sex')
    #爱好：null=True:可以为空，blank:如果为true，允许字段为空白
    t_hobby = models.CharField(max_length=32,null=True,blank=True)

    #源信息
    class Meta:
        #更改表名称为testdate
        db_table ='testdate'
        
views.py逻辑：
  
    #循环添加数据：
    def testadd(request):
        #for循环15条数据
        for i in range(15):
        #第一种创建对象方法
            add = testdate()
            #生成随机数
            flag = random.randrange(100)
            #姓名链接随机数
            add.t_name = "Tom%d" % i
            #年龄=随机数
            add.t_age = flag
            #性别=取余=0或1
            add.t_sex = flag % 2
            add.save()
        return HttpResponse("批量创建成功")
    (注：这里的字段名写的是models里的字段名，不是字段里的字段名)


#大于小于条件查询
    def testget(request):
        #filter：是满足条件的，exclude：是不满足条件的
        #查询满足条件t_age大于40而且小于50，      __gt：大于，  __lt:小于,     __gte:大于等于，   __lte:小于等于
        # get = testdate.objects.filter(t_age__gt=40).filter(t_age__lt=50)
        #查询不满足条件小于50并且满足于80的
        get = testdate.objects.exclude(t_age__lt=50).filter(t_age__lt=80)
        #根据上面的条件查询结果单独查询出74，75，76，相当于：select … where id in (select id from …)
        getone = get.filter(t_age__in=[74,75,76])
        context={
            "get":getone
        }
        return render(request,'date_list.html',context=context)
        
    html文件：
    
    {% for i in get %}
        <li>姓名：{{ i.t_name }}----年龄：{{ i.t_age }}</li>
    {% endfor %}



2、order_by排序和返回Json格式：
#order_by查询条件
    #order_by排序：正序排列order_by("id"),倒序排列order_by("-id")
    getone = testdate.objects.all().order_by("t_age")
    testdate_values = getone.values()
    #打印类型
    print(type(testdate_values))
    #打印成Json格式
    print(testdate_values)
    #for循环打印Json格式
    for i in testdate_values:
        print(i)

    context={
        "get":getone
    }
    return render(request,'date_list.html',context=context)

    html：
    {% for i in get %}
           <li>姓名：{{ i.t_name }}  年龄：{{ i.t_age }}</li>
       {% endfor %}



Models.py 数据表

class Users(models.Model):
    u_name = models.CharField(max_length=16,unique=True)
    u_pass = models.CharField(max_length=256)
    
Views.py 逻辑

3、#count()查询条件
4、#exists()查询条件
    #用户登录判断
    def user_get(request):
        username = "vlkings"
        password = "120"
        # .filter():满足条件的
        getuser = Users.objects.filter(u_name=username)
        # count():作用：返回查询集中的对象个数，和做判断
        # if getuser.count():
        # exists():是否存在和做判断
        if getuser.exists():
            # .first():获取第一条数据
            user = getuser.first()
            # 对比密码是否一致
            if user.u_pass == password:
                print("获取用户信息成功")
            else:
                print("密码错误")
        else:
            print("用户不存在")
        return HttpResponse("获取成功")
        
        
     
5、跨关系查询：
模型类名_属性名_比较运算符，实际上就是处理数据库中的join
grade = Grade.objects.filter(student__scontend__contains='楚没人')

Models.py 数据表

class Grade(models.Model):
    g_name = models.CharField(max_length=16)

class Student(models.Model):
    s_name = models.CharField(max_length=16)
    s_grade = models.ForeignKey("Grade",on_delete=models.CASCADE,)
    
    
Views.py  业务逻辑

def grade_get(request):
    #查询Jack的班级,可以根据你关联表名__关联表名的字段名=数据
    grade = Grade.objects.filter(student__s_name='Jack')
    for i in grade:
        #打印出Jack的班级
        print(i.g_name)
    return HttpResponse("获取成功")
    
    
    
6、聚合函数查询

Models.py  数据表

class Customer(models.Model):
    c_name = models.CharField(max_length=16)
    c_cost = models.IntegerField(default=10)
    
Views.py   业务逻辑

def customer_get(request):
    #这里可以使用Avg:平均值，Count:数据量，Max:最大，Min:最小，Sum:求和
    c = Customer.objects.aggregate(Max("c_cost"))
    print(c)
    return HttpResponse("获取成功")


7、F()，快速简单获取到字段里的数值

Models.py 数据表

class Company(models.Model):
    c_name = models.CharField(max_length=16)
    c_girl_num = models.IntegerField(default=5)
    c_boy_num = models.IntegerField(default=3)
    
    
Views.py 业务逻辑

def company_add(request):
    for i in range(15):
        adds = Company()
        adds.c_name = "Tom%d" % i
        adds.save()
    return HttpResponse("添加成功")


def company_get(request):
    # 计算女生比男生多的公司，F()，快速简单获取到c_girl_num，这样就能获取到女生比男生多的公司
    # c = Company.objects.filter(c_boy_num__lt=F('c_girl_num'))
    # 计算女生比男生多15个以上的
    c = Company.objects.filter(c_boy_num__lt=F('c_girl_num') - 15)
    for i in c:
        print(i.c_name)
    return HttpResponse("获取公司成功")
