settings.py文件设置：
1、ALLOWED_HOSTS = ["*"]

2、INSTALLED_APPS = [ ]    注册APPS
需要注册'debug_toolbar',

3、数据库配置
DATABASES = {
'default': {
    # 'ENGINE': 'django.db.backends.sqlite3',
    # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    'ENGINE': 'django.db.backends.mysql',
    # 数据库引擎
    'NAME': 'caches',
    # 数据库名字
    'USER': 'root',
    # 链接数据库用户名
    'PASSWORD': 'Sloveb55555..',
    # 链接数据库密码
    'HOST': '127.0.0.1',
    # 数据库链接地址
    'POST': '3306',
    # 数据库链接端口
  }
 }

数据库配置：

创建数据库：
    (1)在命令行里输入mysql -uroot -p，然后输入你的Mysql密码
    (2)create database TestMysqlDate charset=utf8;查询所有库：show databases;删除库：drop database 数       据库名;
    (3)在pycharm里链接mysql数据库

添加Mysql驱动
pip install pymysql

伪装mysqlclient:在__init__.py文件里，在__init__.py文件里编辑（也可以写在manage.py文件里）以下代码：
import pymysql
pymysql.install_as_MySQLdb()

（1）Server returns invalid timezone. Go to 'Advanced' tab and set 'serverTimezon'
         解决方法如下：在mysql命令模式下输入：set global time_zone='+8:00';就可以了。
         
（2）执行python manage.py migrate 命令进行文件迁移，这时控制台会报以下错误：
          django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3
          
          按照下面两个方法进行解决(2.0-2.2.7需要按照A、B方法改，3.0.3只需要修改A)
          A：找到控制台的base.py文件或找到以下目录：
          /venv/lib/site-packages/django/db/backends/mysql/base.py
          把一下代码进行注释：
          if version < (1, 3, 13):
               raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)
          B:找到控制台的operations.py文件，或找到以下目录：
          venv\lib\site-packages\django\db\backends\mysql\operations.py
          把query = query.decode(errors='replace')改成query = query.encode(errors='replace')
          
（3）如果出现版本身份验证错误就是下面的错误提示：
          RuntimeError: cryptography is required for sha256_password or caching_sha2_password
          就去安装这个：pip install cryptography


   
4、配置MIDDLEWARE:
创建middleware文件夹，创建python文件......Middle.py，然后注册在settings.py文件的MIDDLEWARE里面。
Debug-Toolbar配置：在setting.py文件里增加下面的middleware
MIDDLEWARE = [ 'debug_toolbar.middleware.DebugToolbarMiddleware', ]


5、缓存配置
CACHES = {      
'default': {
    # 后端实现
    'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
    # 缓存表名称
    'LOCATION': 'my_cache_table',
    # 默认缓存时间5分钟
    'TIMEOUT': 60 * 5,
},
'redis_backend': {
    # 后端实现
    'BACKEND': 'django_redis.cache.RedisCache',
    # 缓存位置
    'LOCATION': 'redis://127.0.0.1:6379/1',
    # 指定客户端
    'OPTIONS': {
        'CLIENT_CLASS': 'django_redis.client.DefaultClient',
   	    }
  }
}

6、配置编码格式等
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

7、静态文件配置
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
MEDIA_ROOT = os.path.join(BASE_DIR, 'static')
创建css\fonts\img\js\uploads\目录


8、配置页面字体
FONT_PATH = os.path.join(BASE_DIR, 'static/fonts/framd.ttf')

9、命令
安装Django2.2.7：pip install django==2.2.7 
安装Django-debug-toolbar:pip install django-debug-toolbar
为项目创建应用：python manage.py startapp App
运行命令：python manage.py runserver （产品上线不要用runserver）
生成迁移文件：python manage.py makemigrations
迁移文件生成表：python manage.py migrate
在windows下开发安装Pillow方法:直接在CMD下pip3 install Pillow

10、配置urls.py
path('newcache/', include(('NewCache.urls', 'newcache'), namespace='newcache')),

Debug-Toolbar配置：
需要在
urlpatterns = [ ] 的下面把下面的代码复制粘贴

if settings.DEBUG:
    import debug_toolbar
    urlpatterns = [
        #2.0以前的使用这个
        #path('__debug__/', include(debug_toolbar.urls)),
        #2.0以后的使用下面的
        url(r'^__debug__/', include(debug_toolbar.urls)),
    ] + urlpatterns
    
（注：settings导包导入项目名称包）

需要在最下面加上：
INTERNAL_IPS = [
    '127.0.0.1','localhost'
]

11、设置base.html类：
<head>
调用的css写到这里
{% block ext_css %}

{% endblock %}
</head>
<body>
{% block header %}

{% endblock %}
{% block content %}

{% endblock %}
{% block footer %}

{% endblock %}
调用的js写到这里
{% block ext_js %}

{% endblock %}
</body>
(注：每一个模块都要有base类)
base_main.html
{% extends 'base.html' %}
{% block ext_css %}

{% endblock %}
(注：其他页面导入的时候要加上

{% load static %}
{{ block.super }}
<script></script>

)
