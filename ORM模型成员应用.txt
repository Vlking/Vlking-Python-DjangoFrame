第一个例子：
Models.py  数据表

class Animal(models.Model):
    a_name= models.CharField(max_length=16)
    #自己创建隐性属性，不直接使用objects
    a_m = models.Manager()


Views.py  业务逻辑

def animal_add(request):
    for i in range(15):
        adds = Animal()
        adds.a_name = "Tom%d" % i
        adds.save()
    return HttpResponse("添加成功")


def animal_get(request):
    # a_m:是在Models.py文件里自己创建了a_m = models.Manager()隐性属性，
    # 所以这里就不是objects,而是a_m
    all = Animal.a_m.all()
    for i in all:
        print(i.a_name)
    return HttpResponse("动物获取成功")



第二个例子：
Models.py  数据表

#BookManager不是数据表
#BookManager继承models.Manager
class BookManager(models.Manager):
    #get_queryset：获取查询的结果集
    def get_queryset(self):
        #super继承父类进行重写
        return super(BookManager,self).get_queryset().filter(is_delete=False)


class Book(models.Model):
    a_name= models.CharField(max_length=16)
    is_delete = models.BooleanField(default=False)
    #自己创建隐性属性，不直接使用objects，这样写的意思就是a_m == objects
    a_m = BookManager()



Views.py  业务逻辑

def book_get(request):
    # a_m:是在Models.py文件里自己创建了a_m = models.Manager()隐性属性，
    # 所以这里就不是objects,而是a_m,这样写的意思就是a_m == objects
    # 查询is_delete=0的数据也就是没有被虚拟删除的数据
    # all = Book.a_m.filter(is_delete=False)这种是普通写法
    # all = Book.a_m.filter(is_delete=False)
    # 因为在Models里已经重写了get_queryset查询结果集的方法并且增加了is_delete=False查询条件，所以我们这里直接all()
    all = Book.a_m.all()
    for i in all:
        print(i.a_name)
    return HttpResponse("动物获取成功")
