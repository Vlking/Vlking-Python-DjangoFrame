1、Django字段类型：

AutoField:主键ID，自动生成，也可以自己创建
CharField:长字符串(max length=字符长度)
TextField:大文本字段（超过4000进行使用）
IntegerField:整数
DecimalField:(max_digits=None,decimal_places=None):使用场景：金融、股票
DecimalField.max_digits:位数总数
DecimalField.decimal_places:小数点后的数字位数
FloatField:浮点数
BooleanField:True/False,默认为False,表单场景：单选按钮
NullBooleanField:null/true/false,表单场景：单选按钮(男，女，保密)
DateField:([auto_now=False, auto_now_add=False])
DateField.auto_now:最后一次修改的时候自动设置当前日期，默认值：false
DateField.auto_now_add:第一次创建的时候自动设置当前日期，默认值：false
TimeField:使用datetime.time实例表示的时间，参数与DateField相同
DateTimeField:日期+时间，参数与DateField相同
FileField:上传文件
ImageField:继承了FileField的所有方法，但对上传的对象进行晓燕，确保是有效的image

2、字段约束：

null:如果为true，允许字段为空
blank:如果为true，允许字段为空白
db_index:创建索引，如果给字段加索引，直接就是db_index=true
default:默认值，使用场景：p_name = models.IntegerFeil(defalut=18),默认值是18
primary key:如果为true,就变成了主键
unique:如果为true,就是唯一值，不能有重复值
db_column:可以改变字段名字，意思是在models里写的字段名是aa，使用db_column=’bb‘之后在表里字段名就是bb了。

3、关系分类：

ForeignKey:一对多，将字段定义在多的端中
ManyToManyField:多对多，将字段定义在两端中
OneToOneField:一对一，将字段定义在任意一段中

4、模型过滤器：

filter：返回符合筛选条件的数据集
exclude:返回不符合筛选条件的数据集
多个filter和exclude可以链接在一起查询使用

5、外键on_delete用法(限制在Django2.0以上版本使用)：

例子：
   class Grade(models.Model):
    g_name = models.CharField(max_length=32)
    
   class Student(models.Model):
    s_name = models.CharField(max_length=16)
    #建立外键，ForeignKey(Grade)外键到Grade上
    #2.0以上版本必须得加on_delete=models.CASCADE,2.0以下版本可以直接写成s_grade =models.ForeignKey(Grade)
    s_grade =models.ForeignKey('Grade',on_delete=models.CASCADE,)

on_delete=None,               # 删除关联表中的数据时,当前表与其关联的field的行为
on_delete=models.CASCADE,     # 删除关联数据,与之关联也删除
on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做
on_delete=models.PROTECT,     # 删除关联数据,引发错误ProtectedError
# models.ForeignKey('关联表', on_delete=models.SET_NULL, blank=True, null=True)
on_delete=models.SET_NULL,    # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）
# models.ForeignKey('关联表', on_delete=models.SET_DEFAULT, default='默认值')
on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）
on_delete=models.SET,         # 删除关联数据,
a. 与之关联的值设置为指定值,设置：models.SET(值)
b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象) 

6、信息源
   class Meta:
      #更改表名称为testdate，如果不更改就是，App名_models类名。
      db_table ='testdate'
      
7、条件查询：

属性__运算符 = 值
__gt:大于
__lt:小于
__gte:大于等于
__lte:小于等于
=:等于
in在某一集合中
contains:类似于模糊查询like
startswith:以xx开始，本质也是like
endswith:以xx结束，本质也是like
exact:判断，大小写敏感，filter(isDelete = False)
contains:是否包含，大小写敏感，filter(sanme_contains='赵')
startswith,endswith:以value开头或结尾，大小写敏感
以上4个在运算符前加上i（ignore）就不区分大小写了
isnull,isnotnull:是否为空，filter(sname_isnull=False)
in:是否包含在范围内，filter(pk__in=[2,4,6,8])
gt,gte,lt,lge,:大于，大于等于，小于，小于等于filter(sage__gt=30)
例：
year,month,day,week_day,hour,minute,second:filter(lasttime__year=2017)
查询快捷：
pk:代表主键，filter(pk=1)

8、状态码：
2xx:请求成功
3xx:转发重定向
4xx:客户端错误
5xx:服务器错了


9、查询异常问题
(1)DoesNotExist:获取不到信息
(2)MultipleObjectsReturned:如果查询条件对应多个同样信息


10、判断查询：
（1）count():作用：返回查询集中的对象个数，和做判断
（2）exists():是否存在和做判断


11、切片功能
#[2:5]:这个是切片功能，查出的数据是从3开始到5
users = User.objects.all()[2:5]

12、聚合函数
Avg:平均值
Count:数据量
Max:最大
Min:最小
Sum:求和
Student.objects().aggregate(Max('sage'))
